# build
#
# Build am9511 emulator
#
# testhw.c is a dummy source file -- so we can use the HI-TECH C
# driver to generate testhw.com easily. I cannot get zxlink to work
# (probably my bad), and -oname is not setting the output name
# for the c.com driver. So, we create 0 length testhw.c and compile
# that to provide the needed name.
#
# For the hardware version, we do not need ova (integer overflow
# math) or the am9511 front end or floating emulation. This is
# all done by the am9511 chip, through hw9511. We *do* need floatcnv
# to be able to make sense of the results of the chip.
#
# For the software version (test.com, vs the hardware testhw.com),
# we use ova for integer math, am9511 for command interpretation.
#
# The main routine test.c is used for both hardware and emulation.
# This is the test driver for the emulation and the chip.
#
# Choose the appropriate build sequence. gcc or zxc. gcc is the
# actual target, because this code is to be incorporated into 8080/
# Z80 emulators to provide AM9511 chip emulation.
#
# NOTE: Our initial target is AM9511 emulation and *not* AM9512 emulation.
#       AM9511 offers more functions, and 16 and 32 bit integer operations.
#       This can more easily enhance typical programs running on the
#       8080/Z80 platform. 16 bit add and subtract are not interesting --
#       multiply and divide are. As are the 32 bit (double) operations.
#
# WHY:  The AM9511 can deliver a floating point divide in 165.9
#       2Mhz 8080 cycles. 41 register instructions. Compare to LLLBASIC
#       at 13079.6 cycles, this is 78.8 times faster.
#
#       We are going to incorporate am9511 into RunCPM for testing.
#       We will see if we can get a floating point divide in the
#       space of 41 instructions. When we get this, we are pretty
#       much complete, and can submit for inclusion into z80pack
#       and altair-duino.

# set -v to display without expansion
set -x

if true; then

  # Build for gcc (emulation)
  #
  # -I. needed because #include <ansi.h> has to find ansi.h
  #
  # Compile hw9511.c to validate compile on gcc
  #
  echo building test
  gcc -O3 -I. -Wall -c hw9511.c
  gcc -O3 -I. -Wall -o test test.c getopt.c am9511.c floatcnv.c ova.c -lm
  gcc -O3 -I. -Wall -DTEST1 -DTEST2 -DTEST3 -DTEST4 -o test14 test.c getopt.c am9511.c floatcnv.c ova.c -lm
  gcc -O3 -I. -Wall -DTEST5 -DTEST6 -DTEST7 -DTEST8 -o test58 test.c getopt.c am9511.c floatcnv.c ova.c -lm

fi

if true; then

  # Build for z80 using zxcc (validation)
  #
  # We optimize everything, to get smallest/best code. Need -LF
  # on link for floating point.
  #
  # Do NOT optimize hw9511.c, as that has inline assembler in
  # it. Attempting to run OPTIM on that can result in very strange
  # things -- like the compiler simply hanging up.
  #
  echo building test.com
  zxc -c    hw9511.c
  zxc -c -o getopt.c
  zxc -c -o am9511.c
  zxc -c -o floatcnv.c
  zxc -c -o ova.c
  #
  ##rm testhw.c
  ##touch testhw.c
  ##zxc -c -o testhw.c
  #
  zxc cnvtest.c floatcnv.obj -LF
  #
  zxc -c -o -DTEST1 -DTEST2 -DTEST3 -DTEST4 test.c
  zxc test.obj getopt.obj am9511.obj floatcnv.obj ova.obj -LF
  cp test.com test14.com
  zxc test.obj getopt.obj hw9511.obj floatcnv.obj -LF
  cp test.com testhw14.com
  #
  zxc -c -o -DTEST5 -DTEST6 -DTEST7 -DTEST8 test.c
  zxc test.obj getopt.obj am9511.obj floatcnv.obj ova.obj -LF
  cp test.com test58.com
  zxc test.obj getopt.obj hw9511.obj floatcnv.obj -LF
  cp test.com testhw58.com
  #
  zxc -c -o test.c
  zxc test.obj getopt.obj hw9511.obj floatcnv.obj -LF
  cp test.com testhw.com
  zxc test.obj getopt.obj am9511.obj floatcnv.obj ova.obj -LF
fi
